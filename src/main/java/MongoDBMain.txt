package src;

//import java.net.UnknownHostException;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;

import com.mongodb.MongoClient;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.util.JSON;
import org.mongojack.JacksonDBCollection;

import java.util.ArrayList;
import java.util.Iterator;
import org.json.simple.JSONObject;

public class MongoDBMain {

	public static final String DB_NAME = "eventspace";
	//public static final String PERSON_COLLECTION = "Person";
	public static final String TOPIC_COLLECTION = "Topic";
	//public static final String CITY_COLLECTION = "City";
	public static final String MONGO_HOST = "localhost";
	public static final int MONGO_PORT = 27017;

	public static void mongo() {
		try {
			MongoClient mongo = new MongoClient(
					MONGO_HOST, MONGO_PORT);
			MongoOperations mongoOps = new MongoTemplate(mongo, DB_NAME);
			User u = new User("someone");
			
			//mongoOps.insert(u, PERSON_COLLECTION);
			//u = new User("someone2");
			//mongoOps.insert(u, PERSON_COLLECTION);

			/*Person p1 = mongoOps.findOne(
					new Query(Criteria.where("name").is("PankajKr")),
					Person.class, PERSON_COLLECTION);

			System.out.println(p1);*/
			
			//mongoOps.dropCollection(PERSON_COLLECTION);
			mongo.close();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void populate_topic() throws Exception{
			MongoClient mongo = new MongoClient(
					MONGO_HOST, MONGO_PORT);
			MongoOperations mongoOps = new MongoTemplate(mongo, DB_NAME);
			MeetupAPIRequest request = MeetupAPIRequest.getInstance();
			int tried = 0;


			mongoOps.dropCollection(TOPIC_COLLECTION);
			ArrayList<Topic> topics = new ArrayList<Topic>();
			while((topics.size()==0) && (tried<3)){
				tried+=1;
			
				ArrayList<JSONObject> topicjson = request.gettopics();
				for(int i=0; i<topicjson.size(); i++){
					Topic t = new Topic(topicjson.get(i));
					topics.add(t);
					//DBObject dbObject = (DBObject) JSON.parse("{'name':'mkyong', 'age':30}");
					mongoOps.insert(t, TOPIC_COLLECTION);
				}
			}
			System.out.printf("Total topics: %d\n", topics.size());
			mongo.close();

	}

	public static ArrayList<Topic> read_topic_frommongo() throws Exception{
			MongoClient mongo = new MongoClient(
					MONGO_HOST, MONGO_PORT);
			MongoOperations mongoOps = new MongoTemplate(mongo, DB_NAME);
			ArrayList<Topic> topics = new ArrayList<Topic>();
			if(mongoOps.getCollectionNames().contains(TOPIC_COLLECTION)){
				JacksonDBCollection<Topic, String> topicCollectionWrap = 
				JacksonDBCollection.wrap(mongoOps.getCollection(TOPIC_COLLECTION), Topic.class, String.class);



				//DBCollection topicCollection = mongoOps.getCollection(TOPIC_COLLECTION);
				//topicCollection.setObjectClass(Topic);
				//DBCursor cursor = topicCollectionWrap.find();
				//topics = cursor.into(new ArrayList<Topic>());
				//while(cursor.hasNext()) {
		        //    topics.add(cursor.next());
		        //}
			
				//topics = topicCollection.find();
					
				
				
			}
			//topics = mongoOps.findAll(Topic.class);
			System.out.printf("Total topics: %d\n", topics.size());
			mongo.close();
			return topics;

	}	

}